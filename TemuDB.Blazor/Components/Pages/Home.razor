@page "/"
@rendermode InteractiveServer
@using TemuDB.Blazor.Services
@inject AuthService AuthService
@inject ApiService ApiService
@inject NavigationManager Navigation

<PageTitle>Temu-Linksammlung</PageTitle>

@if (currentUser == null)
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body text-center">
                        <h3>Willkommen bei der Temu-Linksammlung</h3>
                        <p>Bitte melden Sie sich an, um Ihre Temu-Links zu verwalten.</p>
                        <a href="/login" class="btn btn-primary">Anmelden</a>
                        <a href="/register" class="btn btn-outline-primary ms-2">Registrieren</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Meine Temu-Links</h2>
                    <div>
                        <a href="/new" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Neu erfassen
                        </a>
                        @if (currentUser.IsAdmin)
                        {
                            <a href="/admin" class="btn btn-outline-secondary ms-2">
                                <i class="bi bi-gear"></i> Admin
                            </a>
                        }
                        <button @onclick="Logout" class="btn btn-outline-danger ms-2">
                            <i class="bi bi-box-arrow-right"></i> Abmelden
                        </button>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-search"></i>
                                    </span>
                                    <input type="text" class="form-control" placeholder="Links durchsuchen..."
                                        @bind="searchTerm" @bind:event="oninput" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex justify-content-end">
                                    <select class="form-select w-auto" @bind="sortBy">
                                        <option value="createdAt">Datum (neueste zuerst)</option>
                                        <option value="createdAtAsc">Datum (älteste zuerst)</option>
                                        <option value="description">Beschreibung (A-Z)</option>
                                        <option value="descriptionDesc">Beschreibung (Z-A)</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (isLoading)
                        {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Laden...</span>
                                </div>
                            </div>
                        }
                        else if (filteredLinks.Count == 0)
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-link-45deg" style="font-size: 3rem; color: #ccc;"></i>
                                <h5 class="mt-3">Keine Links gefunden</h5>
                                <p class="text-muted">
                                    @(string.IsNullOrEmpty(searchTerm)
                                                                ? "Sie haben noch keine Temu-Links gespeichert."
                                                                : "Keine Links entsprechen Ihrer Suche.")
                        </p>
                        @if (string.IsNullOrEmpty(searchTerm))
                                {
                                    <a href="/new" class="btn btn-primary">Ersten Link hinzufügen</a>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Beschreibung</th>
                                            <th>Link</th>
                                            <th>Erstellt am</th>
                                            <th>Aktionen</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var link in filteredLinks)
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@link.Description</strong>
                                                </td>
                                                <td>
                                                    <a href="@link.Link" target="_blank" class="text-decoration-none">
                                                        @GetShortUrl(link.Link)
                                                        <i class="bi bi-box-arrow-up-right ms-1"></i>
                                                    </a>
                                                </td>
                                                <td>
                                                    <small class="text-muted">
                                                        @link.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                                    </small>
                                                </td>
                                                <td>
                                                    <button @onclick="() => DeleteLink(link.Id)"
                                                        class="btn btn-sm btn-outline-danger" title="Link löschen">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private User? currentUser;
    private List<TemuLink> allLinks = new();
    private string searchTerm = "";
    private string sortBy = "createdAt";
    private bool isLoading = true;
    private bool hasRendered = false;

    protected override async Task OnInitializedAsync()
    {
        // Keine localStorage-Zugriffe hier, da Prerendering aktiv ist
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            hasRendered = true;
            await LoadUserAndLinks();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Wird bei jeder Navigation zur Seite aufgerufen
        await LoadUserAndLinks();
    }

    private async Task LoadUserAndLinks()
    {
        currentUser = await AuthService.GetCurrentUserAsync();

        if (currentUser != null)
        {
            await LoadLinks();
        }

        StateHasChanged();
    }

    private async Task LoadLinks()
    {
        try
        {
            allLinks = await ApiService.GetAsync<List<TemuLink>>($"temulink/user/{currentUser!.Username}") ?? new();
        }
        catch (Exception ex)
        {
            // Fehlerbehandlung
            Console.WriteLine($"Fehler beim Laden der Links: {ex.Message}");
        }
    }

    private List<TemuLink> filteredLinks
    {
        get
        {
            var filtered = allLinks.Where(l => string.IsNullOrEmpty(searchTerm) ||
            l.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            l.Link.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

            return sortBy switch
            {
                "createdAt" => filtered.OrderByDescending(l => l.CreatedAt).ToList(),
                "createdAtAsc" => filtered.OrderBy(l => l.CreatedAt).ToList(),
                "description" => filtered.OrderBy(l => l.Description).ToList(),
                "descriptionDesc" => filtered.OrderByDescending(l => l.Description).ToList(),
                _ => filtered.OrderByDescending(l => l.CreatedAt).ToList()
            };
        }
    }

    private string GetShortUrl(string url)
    {
        if (url.Length <= 50) return url;
        return url.Substring(0, 47) + "...";
    }

    private async Task DeleteLink(int id)
    {
        if (currentUser == null) return;

        try
        {
            var success = await ApiService.DeleteAsync($"temulink/{id}?username={currentUser.Username}");
            if (success)
            {
                await LoadLinks();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Löschen des Links: {ex.Message}");
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/", forceLoad: true);
    }

    public class TemuLink
    {
        public int Id { get; set; }
        public string Username { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Link { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }
}
