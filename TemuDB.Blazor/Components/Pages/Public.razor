@page "/public"
@rendermode InteractiveServer
@using TemuDB.Blazor.Services
@inject AuthService AuthService
@inject ApiService ApiService
@inject NavigationManager Navigation

<PageTitle>Öffentliche Temu-Links - Temu-Linksammlung</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="bi bi-globe"></i> Öffentliche Temu-Links
                </h2>
                <div>
                    @if (currentUser != null)
                    {
                        <a href="/" class="btn btn-outline-secondary">
                            <i class="bi bi-house"></i> Meine Links
                        </a>
                    }
                    else
                    {
                        <a href="/login" class="btn btn-primary">
                            <i class="bi bi-person"></i> Anmelden
                        </a>
                    }
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Links durchsuchen..."
                                    @bind="searchTerm" @bind:event="oninput" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex justify-content-end">
                                <select class="form-select w-auto" @bind="sortBy">
                                    <option value="createdAt">Datum (neueste zuerst)</option>
                                    <option value="createdAtAsc">Datum (älteste zuerst)</option>
                                    <option value="description">Beschreibung (A-Z)</option>
                                    <option value="descriptionDesc">Beschreibung (Z-A)</option>
                                    <option value="username">Benutzer (A-Z)</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Laden...</span>
                            </div>
                        </div>
                    }
                    else if (filteredLinks.Count == 0)
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-globe" style="font-size: 3rem; color: #ccc;"></i>
                            <h5 class="mt-3">Keine öffentlichen Links gefunden</h5>
                            <p class="text-muted">
                                @(string.IsNullOrEmpty(searchTerm)
                                                            ? "Es sind noch keine öffentlichen Temu-Links verfügbar."
                                                            : "Keine Links entsprechen Ihrer Suche.")
                        </p>
                    </div>
                                        }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Beschreibung</th>
                                        <th>Link</th>
                                        <th>Von</th>
                                        <th>Erstellt am</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var link in filteredLinks)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@link.Description</strong>
                                            </td>
                                            <td>
                                                <a href="@link.Link" target="_blank" class="text-decoration-none">
                                                    @GetShortUrl(link.Link)
                                                    <i class="bi bi-box-arrow-up-right ms-1"></i>
                                                </a>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">
                                                    <i class="bi bi-person"></i> @link.Username
                                                </span>
                                            </td>
                                            <td>
                                                <small class="text-muted">
                                                    @link.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                                </small>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User? currentUser;
    private List<PublicTemuLink> allLinks = new();
    private string searchTerm = "";
    private string sortBy = "createdAt";
    private bool isLoading = true;
    private bool hasRendered = false;

    protected override async Task OnInitializedAsync()
    {
        // Keine localStorage-Zugriffe hier, da Prerendering aktiv ist
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasRendered)
        {
            hasRendered = true;
            await LoadUserAndLinks();
        }
    }

    private async Task LoadUserAndLinks()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        await LoadLinks();
        StateHasChanged();
    }

    private async Task LoadLinks()
    {
        try
        {
            allLinks = await ApiService.GetAsync<List<PublicTemuLink>>("temulink/public") ?? new();
        }
        catch (Exception ex)
        {
            // Fehlerbehandlung
            Console.WriteLine($"Fehler beim Laden der öffentlichen Links: {ex.Message}");
        }
    }

    private List<PublicTemuLink> filteredLinks
    {
        get
        {
            var filtered = allLinks.Where(l => string.IsNullOrEmpty(searchTerm) ||
            l.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            l.Link.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            l.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

            return sortBy switch
            {
                "createdAt" => filtered.OrderByDescending(l => l.CreatedAt).ToList(),
                "createdAtAsc" => filtered.OrderBy(l => l.CreatedAt).ToList(),
                "description" => filtered.OrderBy(l => l.Description).ToList(),
                "descriptionDesc" => filtered.OrderByDescending(l => l.Description).ToList(),
                "username" => filtered.OrderBy(l => l.Username).ToList(),
                _ => filtered.OrderByDescending(l => l.CreatedAt).ToList()
            };
        }
    }

    private string GetShortUrl(string url)
    {
        if (url.Length <= 50) return url;
        return url.Substring(0, 47) + "...";
    }

    public class PublicTemuLink
    {
        public int Id { get; set; }
        public string Username { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Link { get; set; } = string.Empty;
        public bool IsPublic { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}
